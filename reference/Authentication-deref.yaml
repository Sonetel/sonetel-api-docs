openapi: 3.1.0
info:
  title: Authentication
  version: '1.0'
  summary: Auth API allows the user to generate the JWT token
  description: |-
    All API requests that deal with private data such as user details, phone number subscriptions and so on require authentication in the form of a [bearer token](https://www.oauth.com/oauth2-servers/differences-between-oauth-1-2/bearer-tokens/).

    You can use this endpoint to create a token using your registered email address & password. This token is passed in the Authorization header of the request.

    Copy the `access_token` from the response body and add it to the request header to authenticate your API requests. Usage: `Authorization: Bearer <ACCESS_TOKEN>`

    <!-- theme: info -->

    > Access tokens have an expiry of 24 hours. Use the `refresh_token` to generate a new access token.

    ## Request access token

    You need your Sonetel username and password to generate an OAuth2 token.

    > The username & password to be used are same as the ones you use to log in at [app.sonetel.com](https://app.sonetel.com/).

    <!--
    type: tab
    title: curl
    -->

    ```c
    curl \
      -u sonetel-web:sonetel-web \
      --request POST 'https://api.sonetel.com/SonetelAuth/beta/oauth/token' \
      --header 'Accept: application/json' \
      --header 'Content-Type: application/x-www-form-urlencoded' \
      --form 'grant_type=password' \
      --form 'password=YOUR_SONETEL_PASSWORD' \
      --form 'refresh=yes' \
      --form 'username=YOUR_SONETEL_USERNAME'
    ```

    <!--
    type: tab
    title: Python
    -->
    ```python
    import requests
    import urllib.parse
    import os

    '''
    This script uses the Content-Type 'application/x-www-form-urlencoded' to demonstrate that your application can use either 'multipart/form-data' or 'application/x-www-form-urlencoded' when requesting for an access token.
    '''

    url = "https://api.sonetel.com/SonetelAuth/beta/oauth/token"

    '''
    This script assumes that your Sonetel credentials are present as environment variables.

    Do not hard code your credentials in your application, use the security best practices to protect your credentials from being compromised.
    '''

    sonetelUsername = os.environ.get('SonetelUsername')
    sonetelPassword = os.environ.get('SonetelPassword')
    grantType = 'password'

    payload= { 
        'grant_type' : grantType,
        'password' : sonetelPassword,
        'refresh':'yes',
        'username' :  sonetelUsername
        }

    payloadEncoded = urllib.parse.urlencode(payload)

    headers = {
      'Accept': 'application/json, text/plain',
      'Content-Type': 'application/x-www-form-urlencoded'
    }

    response = requests.request(
        "POST", 
        url, 
        data=payloadEncoded, 
        headers=headers
        )

    if response.status_code == 200:
        print(response.json())
    else:
        print(response.text)
    ```

    <!-- type: tab-end -->

    > **Tip**: In Linux, pipe the output of the above command to `python -m json.tool` to pretty print the JSON response.

    ### Successful response
    A successful request will return the access token, as well as a refresh token.

    ```json
    {
        "access_token": "ACCESS_TOKEN",
        "token_type": "bearer",
        "refresh_token": "REFRESH_TOKEN"
    }
    ```

    ## Refresh the access token

    The default expiry of an `access_token` is 6 months. After this, you will can use the [refresh token](https://www.oauth.com/oauth2-servers/making-authenticated-requests/refreshing-an-access-token/) to generate a new access token.

    <!-- theme: warning -->

    > Be sure to include the parameter `refresh=yes` in your request to `oauth/token` in order to receive the `refresh_token` in the response.

    ```c
    curl \
      -u sonetel-web:sonetel-web \
      --request POST 'https://api.sonetel.com/SonetelAuth/beta/oauth/token' \
      --header 'Accept: application/json' \
      --form 'grant_type=refresh_token' \
      --form 'password=YOUR_SONETEL_PASSWORD' \
      --form 'refresh=yes' \
      --form 'username=YOUR_SONETEL_USERNAME' \
      --form 'refresh_token=REFRESH_TOKEN_FROM_LAST_AUTH_REQUEST'
    ```

    ## Authenticate your API requests

    Once you have obtained an access token using the [/oauth/token](../../reference/Authentication.yaml), you can authenticate your API requests by including it in the authrization header like this.

    <!--
    type: tab
    title: curl
    -->

    ```c
    curl \
      --request GET \
      --url 'https://beta-api.sonetel.com/account/YOUR_ACCOUNT_ID' \
      --header 'Authorization: Bearer YOUR_ACCESS_TOKEN'
    ```

    <!--
    type: tab
    title: Python
    -->

    ```python
    import requests

    url = "https://beta-api.sonetel.com/account/YOUR_ACCOUNT_ID"

    headers = {
      'Authorization': 'Bearer YOUR_ACCESS_TOKEN'
    }

    response = requests.request("GET", url, headers=headers)

    if response.status_code == 200:
        print(response.json())
    else:
        print(response.text)
    ```
    <!-- type: tab-end -->
servers:
  - url: 'https://api.sonetel.com/SonetelAuth/beta/'
    description: Production
  - url: 'https://chat-api.sonetel.com/SonetelAuth/1.3'
    description: Staging
paths:
  /oauth/token:
    parameters: []
    post:
      summary: Create token
      operationId: create-JWT-token
      responses:
        '200':
          description: |-
            **OK**

            A successful request returns a 200 OK response along with a JSON body that contains the `access_token`, `refresh_token` (if requested) and `token_type`
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    access_token: ACCESS_TOKEN
                    token_type: bearer
                    refresh_token: REFRESH_TOKEN
                properties:
                  access_token:
                    type: string
                    description: The OAuth2 token that you can use to authenticate API requests.
                  token_type:
                    type: string
                    description: 'Specifies the type of token returned. '
                    example: bearer
                  refresh_token:
                    type: string
                    description: Contains the refresh token if requested
              examples:
                Example:
                  value:
                    access_token: ACCESS_TOKEN
                    token_type: bearer
                    refresh_token: REFRESH_TOKEN
        '400':
          description: |
            **Bad Request**

            This error is returned if the request is incorrect or incomplete.

            For example, the `grant_type` field may be missing in the body or the `Content-Type` header may be incorrect.
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  error:
                    type: string
                    minLength: 1
                  error_description:
                    type: string
                    minLength: 1
                required:
                  - error
                  - error_description
                x-examples:
                  example-1:
                    error: invalid_request
                    error_description: Missing grant type
              examples:
                Example:
                  value:
                    error: invalid_request
                    error_description: Missing grant type
        '401':
          description: |
            **Unauthorized**

            Please check that you have included the correct `username` and `password` in the request body.
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  error:
                    type: string
                    minLength: 1
                  error_description:
                    type: string
                    minLength: 1
                required:
                  - error
                  - error_description
                x-examples:
                  example-1:
                    error: unauthorized
                    error_description: User with name user@example.com not found
              examples:
                Example:
                  value:
                    error: unauthorized
                    error_description: User with name user@example.com not found
      description: |
        Use this endpoint to generate tokens needed to authenticate API requests.
      parameters:
        - schema:
            type: string
            default: multipart/form-data
          in: header
          name: Content-Type
          required: true
          description: multipart/form-data
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  enum:
                    - password
                    - refresh_token
                  default: password
                  description: 'The OAuth2 grant type, usually set to ''password'' to generate a new token.'
                password:
                  type: string
                  format: password
                  description: The password you use to login at app.sonetel.com
                refresh:
                  type: string
                  enum:
                    - 'yes'
                    - 'no'
                  description: Optional. Flag to control whether or not a refresh token is included in the response.
                  default: 'yes'
                username:
                  type: string
                  format: email
                  description: Your email address registered with Sonetel.
                refresh_token:
                  type: string
                  description: Optional. Pass the refresh_token in this field to generate a new access_token.
              required:
                - grant_type
                - password
                - username
            examples:
              New Token:
                value:
                  grant_type: password
                  password: pa$$word
                  refresh: 'yes'
                  username: user@example.com
              Refresh Token:
                value:
                  grant_type: refresh_token
                  password: pa$$word
                  refresh: 'yes'
                  username: user@example.com
                  refresh_token: refresh_token_from_old_request
        description: |-
          The `username` & `password` in the request body are the email address & password that are used to login at [app.sonetel.com](https://app.sonetel.com).

          In accordance with [OAuth2](https://oauth.net/2/) guidelines, you are also required to specify the `grant_type` in the request body. If requesting for a new token, set it to `password` otherwise set it to `refresh_token` to refresh an expired access token.
components:
  schemas: {}
  securitySchemes:
    'sonetel-dev:sonetel-dev':
      type: http
      scheme: basic
      description: ''
  parameters:
    grant_type:
      name: grant_type
      in: header
      required: false
      schema:
        type: string
      description: Takes the value password for the field
  examples: {}
security:
  - 'sonetel-conversations:sonetel-conversations': []
