openapi: 3.1.0

info:
  title: Sonetel Developer Documentation
  version: '1.0'
  description:
    $ref: 'description.yml#/introduction'

  contact:
    name: Sonetel API Support
    email: api.support@sonetel.com
  termsOfService: 'https://sonetel.com/en/help/help-topics/terms-conditions/terms-conditions/'

servers:
  - url: 'https://beta-api.sonetel.com'
    description: production

tags:
  - name: 1-Click Applications
    description: >-
      1-Click applications are pre-built Droplet images or Kubernetes apps with software,
      features, and configuration details already set up for you. They can be found in the
      [DigitalOcean Marketplace](https://www.digitalocean.com/docs/marketplace).

  - name: Account
    description: Provides information about your current account.

  - name: Actions
    description: >-
      Actions are records of events that have occurred on the resources in your account.
      These can be things like rebooting a Droplet, or transferring an image to a new region.

      An action object is created every time one of these actions is initiated. The action
      object contains information about the current status of the action, start and complete
      timestamps, and the associated resource type and ID.

      Every action that creates an action object is available through this endpoint. Completed
      actions are not removed from this list and are always available for querying.

  - name: Apps
    description: >-
      App Platform is a Platform-as-a-Service (PaaS) offering from DigitalOcean that allows
      developers to publish code directly to DigitalOcean servers without worrying about the
      underlying infrastructure.

      Most API operations are centered around a few core object types. Following are the
      definitions of these types. These definitions will be omitted from the operation-specific
      documentation.

      For documentation on app specifications (`AppSpec` objects), please refer to the
      [product documentation](https://www.digitalocean.com/docs/app-platform/references/app-specification-reference/).

paths:
  /account/{accountid}/phonenumbersubscription:
    get:
      $ref: 'reference/phone_numbers.yaml'
    post:
      $ref: 'reference/phone_numbers.yaml'

components:
  securitySchemes:
    bearer_auth:
      type: http
      scheme: bearer
      description: |
        ## OAuth Authentication

        All API requests that deal with private data such as user details, phone number subscriptions and so on require authentication in the form of a [bearer token](https://www.oauth.com/oauth2-servers/differences-between-oauth-1-2/bearer-tokens/).

        You can use this endpoint to create a token using your registered email address & password. This token is passed in the Authorization header of the request.

        Copy the `access_token` from the response body and add it to the request header to authenticate your API requests. Usage: `Authorization: Bearer <ACCESS_TOKEN>`

        <!-- theme: info -->

        > Access tokens have an expiry of 24 hours. Use the `refresh_token` to generate a new access token.

        <!--
        type: tab
        title: curl
        -->

        ```c
        curl \
          -u sonetel-web:sonetel-web \
          --request POST 'https://api.sonetel.com/SonetelAuth/beta/oauth/token' \
          --header 'Accept: application/json' \
          --header 'Content-Type: application/x-www-form-urlencoded' \
          --form 'grant_type=password' \
          --form 'password=YOUR_SONETEL_PASSWORD' \
          --form 'refresh=yes' \
          --form 'username=YOUR_SONETEL_USERNAME'
        ```

        <!--
        type: tab
        title: Python
        -->

        ```python
        import requests
        import urllib.parse
        import os

        '''
        This script uses the Content-Type 'application/x-www-form-urlencoded' to demonstrate that your application can use either 'multipart/form-data' or 'application/x-www-form-urlencoded' when requesting for an access token.
        '''

        url = "https://api.sonetel.com/SonetelAuth/beta/oauth/token"

        '''
        This script assumes that your Sonetel credentials are present as environment variables.

        Do not hard code your credentials in your application, use the security best practices to protect your credentials from being compromised.
        '''

        sonetelUsername = os.environ.get('SonetelUsername')
        sonetelPassword = os.environ.get('SonetelPassword')
        grantType = 'password'

        payload= { 
            'grant_type' : grantType,
            'password' : sonetelPassword,
            'refresh' :'yes',
            'username' :  sonetelUsername
            }

        payloadEncoded = urllib.parse.urlencode(payload)

        headers = {
          'Accept': 'application/json, text/plain',
          'Content-Type': 'application/x-www-form-urlencoded'
        }

        response = requests.request(
            "POST", 
            url, 
            data=payloadEncoded, 
            headers=headers
            )

        if response.status_code == 200:
            print(response.json())
        else:
            print(response.text)
        ```

        <!-- type: tab-end -->

security:
  - bearer_auth: []